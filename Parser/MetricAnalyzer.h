////////////////////////////////////////////////////////////////////////////////////////////
//  MetricAnalyzer.h - evaluating and displaying the size and complexity of all functions //
//                     in each of a set of specified packages.                            //
//  ver 1.0                                                                               //
//  Application:   Project #2, Requirement #8                                             //
//  Author:        Young Kyu Kim, Syracuse University,                                    //
//                 (315) 870-8906, ykim127@syr.edu                                        //
////////////////////////////////////////////////////////////////////////////////////////////
/*
	Package Operation:
	==================
	MetricAnalyzer uses the AST generated by Parser to perform metric analsys to calculate
	method size and cyclometic complexity.

	Build Process:
	--------------
	Required Files: MetricAnalyzer.h, ASTree.h

	Maintenance History:
	====================
	ver 1.0 : 12 March, 2016
*/

#include "ASTree.h"
class MetricAnalyzer
{
public:
	//Constructor
	MetricAnalyzer(ASTree* t) : tree(t) {}

	//Print Tree recursively (l->r) using Depth First Search
	void printTree(ASNode* node, int n);                      //n: level of tree (0 would be root)

	//Calculate Method Size, recursively
	void calcMethodSize(ASNode* node, size_t &n);

	//Calculate Complexities, recursively
	void calcComplexity(ASNode* node, int &n);

	//Returns pointer to Abstract Syntax Tree
	ASTree* getTree();

private:
	ASTree* tree;
};